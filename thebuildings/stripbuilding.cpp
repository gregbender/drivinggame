/*
* This file was produced by 3D Exploration Plugin, we
* added to the Gen3DObjectList() function to help automatically
* produce bouding boxes and help the display lists be exported
* properly.
* http://www.xdsoft.com/explorer/
*/
#include <windows.h>
#include <GL\gl.h>
#include <GL\glu.h>

#include <math.h>

namespace stripbuilding {

struct sample_MATERIAL{
 GLfloat ambient[3];
 GLfloat diffuse[3];
 GLfloat specular[3];
 GLfloat emission[3];
 GLfloat alpha;
 GLfloat phExp;
 int   texture;
};
struct sample_TEXTURE{
 char * name;
 GLint  id;
};

static sample_MATERIAL materials [3] = {
 {{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	1.0f,2048.0f,0}, //ss2conc
 {{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	1.0f,168.897f,1}, //ss2glass
 {{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	{1.0f,1.0f,1.0f},	1.0f,2048.0f,2} //ss2roof
};

static sample_TEXTURE texture_maps [3] = {
{"textures/stripbuilding_0.bmp",0},
{"textures/stripbuilding_1.bmp",0},
{"textures/stripbuilding_2.bmp",0}
};

// 112 Verticies
// 322 Texture Coordinates
// 48 Normals
// 180 Triangles

static short face_indicies[180][9] = {
// ss2conc
	{0,1,9 ,0,0,0 ,0,1,2 }, {0,9,8 ,0,0,0 ,0,2,3 }, {1,2,10 ,1,1,1 ,4,5,6 },
	{1,10,9 ,1,1,1 ,4,6,7 }, {2,3,11 ,2,2,2 ,8,9,10 }, {2,11,10 ,2,2,2 ,8,10,11 },
	{3,4,12 ,3,3,3 ,9,12,13 }, {3,12,11 ,3,3,3 ,9,13,10 }, {4,5,13 ,4,4,4 ,14,15,16 },
	{4,13,12 ,4,4,4 ,14,16,17 }, {5,6,14 ,5,5,5 ,4,5,6 }, {5,14,13 ,5,5,5 ,4,6,7 },
	{6,7,15 ,6,6,6 ,18,19,20 }, {6,15,14 ,6,6,6 ,18,20,21 }, {7,0,8 ,7,7,7 ,19,22,23 },
	{7,8,15 ,7,7,7 ,19,23,20 }, {6,0,7 ,8,8,8 ,24,25,26 }, {5,0,6 ,8,8,8 ,27,25,24 },
	{4,0,5 ,8,8,8 ,28,25,27 }, {3,0,4 ,8,8,8 ,29,25,28 }, {2,0,3 ,8,8,8 ,6,30,31 },
	{1,0,2 ,8,8,8 ,7,30,6 }, {16,17,25 ,9,9,9 ,32,33,34 }, {16,25,24 ,9,9,9 ,32,34,35 },
	{17,18,26 ,1,1,1 ,36,37,38 }, {17,26,25 ,1,1,1 ,36,38,39 }, {18,19,27 ,2,2,2 ,40,41,42 },
	{18,27,26 ,2,2,2 ,40,42,43 }, {19,20,28 ,3,3,3 ,41,44,45 }, {19,28,27 ,3,3,3 ,41,45,42 },
	{20,21,29 ,4,4,4 ,46,47,48 }, {20,29,28 ,4,4,4 ,46,48,49 }, {21,22,30 ,5,5,5 ,36,37,38 },
	{21,30,29 ,5,5,5 ,36,38,39 }, {22,23,31 ,10,10,10 ,50,51,52 },
	{22,31,30 ,10,10,10 ,50,52,53 }, {23,16,24 ,7,7,7 ,51,54,55 },
	{23,24,31 ,7,7,7 ,51,55,52 }, {22,16,23 ,8,8,8 ,24,25,26 }, {21,16,22 ,8,8,8 ,27,25,24 },
	{20,16,21 ,8,8,8 ,28,25,27 }, {19,16,20 ,8,8,8 ,29,25,28 }, {18,16,19 ,8,8,8 ,6,30,31 },
	{17,16,18 ,8,8,8 ,7,30,6 }, {30,31,24 ,11,11,11 ,56,57,58 },
	{29,30,24 ,11,11,11 ,36,37,59 }, {28,29,24 ,11,11,11 ,60,36,59 },
	{27,28,24 ,11,11,11 ,61,60,59 }, {26,27,24 ,11,11,11 ,62,63,64 },
	{25,26,24 ,11,11,11 ,65,62,64 }, {32,35,34 ,8,8,8 ,66,67,68 },
	{35,32,33 ,8,8,8 ,67,66,69 }, {36,39,37 ,11,11,11 ,70,71,72 },
	{39,36,38 ,11,11,11 ,71,70,73 }, {32,37,33 ,12,12,12 ,74,75,76 },
	{37,32,36 ,12,12,12 ,75,74,77 }, {33,39,35 ,13,13,13 ,78,79,80 },
	{39,33,37 ,13,13,13 ,79,78,81 }, {35,38,34 ,1,1,1 ,82,83,84 },
	{38,35,39 ,1,1,1 ,83,82,85 }, {34,36,32 ,14,14,14 ,86,87,88 },
	{36,34,38 ,14,14,14 ,87,86,89 }, {40,43,42 ,8,8,8 ,90,91,92 },
	{43,40,41 ,8,8,8 ,91,90,93 }, {44,47,45 ,11,11,11 ,94,95,96 },
	{47,44,46 ,11,11,11 ,95,94,97 }, {40,45,41 ,15,15,15 ,98,99,100 },
	{45,40,44 ,15,15,15 ,99,98,101 }, {41,47,43 ,16,16,16 ,102,103,104 },
	{47,41,45 ,16,16,16 ,103,102,105 }, {43,46,42 ,17,17,17 ,106,107,108 },
	{46,43,47 ,17,17,17 ,107,106,109 }, {42,44,40 ,18,18,18 ,110,111,112 },
	{44,42,46 ,18,18,18 ,111,110,113 }, {48,51,50 ,8,8,8 ,114,115,116 },
	{51,48,49 ,8,8,8 ,115,114,117 }, {52,55,53 ,11,11,11 ,118,119,120 },
	{55,52,54 ,11,11,11 ,119,118,121 }, {48,53,49 ,19,19,19 ,122,123,124 },
	{53,48,52 ,19,19,19 ,123,122,125 }, {49,55,51 ,16,16,16 ,126,127,128 },
	{55,49,53 ,16,16,16 ,127,126,129 }, {51,54,50 ,17,17,17 ,130,131,132 },
	{54,51,55 ,17,17,17 ,131,130,133 }, {50,52,48 ,18,18,18 ,134,135,136 },
	{52,50,54 ,18,18,18 ,135,134,137 }, {56,59,58 ,8,8,8 ,138,139,140 },
	{59,56,57 ,8,8,8 ,139,138,141 }, {60,63,61 ,11,11,11 ,142,143,144 },
	{63,60,62 ,11,11,11 ,143,142,145 }, {56,61,57 ,20,20,20 ,146,147,148 },
	{61,56,60 ,20,20,20 ,147,146,149 }, {57,63,59 ,14,14,14 ,150,151,152 },
	{63,57,61 ,14,14,14 ,151,150,153 }, {59,62,58 ,21,21,21 ,154,155,156 },
	{62,59,63 ,21,21,21 ,155,154,157 }, {58,60,56 ,13,13,13 ,158,159,160 },
	{60,58,62 ,13,13,13 ,159,158,161 }, {64,66,67 ,8,8,8 ,162,163,164 },
	{67,65,64 ,8,8,8 ,164,165,162 }, {68,69,71 ,11,11,11 ,166,167,168 },
	{71,70,68 ,11,11,11 ,168,169,166 }, {64,65,69 ,22,22,22 ,170,171,172 },
	{69,68,64 ,22,22,22 ,172,173,170 }, {65,67,71 ,13,13,13 ,174,175,176 },
	{71,69,65 ,13,13,13 ,176,177,174 }, {67,66,70 ,23,23,23 ,178,179,180 },
	{70,71,67 ,23,23,23 ,180,181,178 }, {66,64,68 ,14,14,14 ,182,183,184 },
	{68,70,66 ,14,14,14 ,184,185,182 }, {72,74,75 ,8,8,8 ,186,187,188 },
	{75,73,72 ,8,8,8 ,188,189,186 }, {76,77,79 ,11,11,11 ,190,191,192 },
	{79,78,76 ,11,11,11 ,192,193,190 }, {72,73,77 ,15,15,15 ,194,195,196 },
	{77,76,72 ,15,15,15 ,196,197,194 }, {73,75,79 ,18,18,18 ,198,199,200 },
	{79,77,73 ,18,18,18 ,200,201,198 }, {75,74,78 ,17,17,17 ,202,203,204 },
	{78,79,75 ,17,17,17 ,204,205,202 }, {74,72,76 ,16,16,16 ,206,207,208 },
	{76,78,74 ,16,16,16 ,208,209,206 }, {80,82,83 ,8,8,8 ,210,211,212 },
	{83,81,80 ,8,8,8 ,212,213,210 }, {84,85,87 ,11,11,11 ,214,215,216 },
	{87,86,84 ,11,11,11 ,216,217,214 }, {80,81,85 ,19,19,19 ,218,219,220 },
	{85,84,80 ,19,19,19 ,220,221,218 }, {81,83,87 ,18,18,18 ,222,223,224 },
	{87,85,81 ,18,18,18 ,224,225,222 }, {83,82,86 ,17,17,17 ,226,227,228 },
	{86,87,83 ,17,17,17 ,228,229,226 }, {82,80,84 ,16,16,16 ,230,231,232 },
	{84,86,82 ,16,16,16 ,232,233,230 }, {88,90,91 ,8,8,8 ,234,235,236 },
	{91,89,88 ,8,8,8 ,236,237,234 }, {92,93,95 ,11,11,11 ,238,239,240 },
	{95,94,92 ,11,11,11 ,240,241,238 }, {88,89,93 ,5,5,5 ,242,243,244 },
	{93,92,88 ,5,5,5 ,244,245,242 }, {89,91,95 ,14,14,14 ,246,247,248 },
	{95,93,89 ,14,14,14 ,248,249,246 }, {91,90,94 ,24,24,24 ,250,251,252 },
	{94,95,91 ,24,24,24 ,252,253,250 }, {90,88,92 ,13,13,13 ,254,255,256 },
	{92,94,90 ,13,13,13 ,256,257,254 }
// ss2glass
	, {96,97,105 ,25,26,25 ,258,259,260 }, {96,105,104 ,25,25,25 ,258,260,261 },
	{97,98,106 ,1,1,1 ,262,263,264 }, {97,106,105 ,1,1,1 ,262,264,265 },
	{98,99,107 ,27,28,27 ,266,267,268 }, {98,107,106 ,27,27,29 ,266,268,269 },
	{99,100,108 ,30,31,30 ,270,271,272 }, {99,108,107 ,30,30,32 ,270,272,273 },
	{100,101,109 ,33,34,33 ,274,275,276 }, {100,109,108 ,33,33,35 ,274,276,277 },
	{101,102,110 ,5,5,5 ,262,263,264 }, {101,110,109 ,5,5,5 ,262,264,265 },
	{102,103,111 ,36,37,36 ,278,279,280 }, {102,111,110 ,36,36,38 ,278,280,281 },
	{103,96,104 ,39,40,39 ,282,283,284 }, {103,104,111 ,39,39,41 ,282,284,285 },
	{102,96,103 ,42,43,8 ,286,287,288 }, {101,96,102 ,44,43,42 ,289,287,286 },
	{100,96,101 ,45,43,44 ,290,287,289 }, {99,96,100 ,46,43,45 ,291,292,293 },
	{98,96,99 ,47,43,46 ,294,295,296 }, {97,96,98 ,47,43,47 ,297,295,294 },
	{110,111,104 ,11,11,11 ,298,299,300 }, {109,110,104 ,11,11,11 ,262,263,301 },
	{108,109,104 ,11,11,11 ,302,303,304 }, {107,108,104 ,11,11,11 ,305,306,307 },
	{106,107,104 ,11,11,11 ,308,309,310 }, {105,106,104 ,11,11,11 ,311,312,313 }
// ss2roof
	, {14,15,8 ,11,11,11 ,314,315,316 }, {13,14,8 ,11,11,11 ,317,314,316 },
	{12,13,8 ,11,11,11 ,318,317,316 }, {11,12,8 ,11,11,11 ,319,318,316 },
	{10,11,8 ,11,11,11 ,320,319,316 }, {9,10,8 ,11,11,11 ,321,320,316 }
};
static GLfloat vertices [112][3] = {
{-0.145429f,0.439125f,-0.177794f},{-0.186732f,0.439125f,-0.136491f},{-0.186732f,0.439125f,0.136692f},
{-0.145429f,0.439125f,0.177995f},{0.145429f,0.439125f,0.177794f},{0.186732f,0.439125f,0.136491f},
{0.186732f,0.439125f,-0.136692f},{0.145429f,0.439125f,-0.177995f},{-0.145429f,0.5f,-0.177794f},
{-0.186732f,0.5f,-0.136491f},{-0.186732f,0.5f,0.136692f},{-0.145429f,0.5f,0.177995f},
{0.145429f,0.5f,0.177794f},{0.186732f,0.5f,0.136491f},{0.186732f,0.5f,-0.136692f},
{0.145429f,0.5f,-0.177995f},{-0.145429f,-0.5f,-0.177794f},{-0.186732f,-0.5f,-0.136491f},
{-0.186732f,-0.5f,0.136692f},{-0.145429f,-0.5f,0.177995f},{0.145429f,-0.5f,0.177794f},
{0.186732f,-0.5f,0.136491f},{0.186732f,-0.5f,-0.136692f},{0.145429f,-0.5f,-0.177995f},
{-0.145429f,-0.439125f,-0.177794f},{-0.186732f,-0.439125f,-0.136491f},{-0.186732f,-0.439125f,0.136692f},
{-0.145429f,-0.439125f,0.177995f},{0.145429f,-0.439125f,0.177794f},{0.186732f,-0.439125f,0.136491f},
{0.186732f,-0.439125f,-0.136692f},{0.145429f,-0.439125f,-0.177995f},{-0.125304f,-0.448883f,0.165503f},
{-0.125304f,-0.448883f,0.175993f},{-0.144187f,-0.448883f,0.165503f},{-0.144187f,-0.448883f,0.175993f},
{-0.125304f,0.444386f,0.165503f},{-0.125304f,0.444386f,0.175993f},{-0.144187f,0.444386f,0.165503f},
{-0.144187f,0.444386f,0.175993f},{-0.173958f,-0.448883f,0.134897f},{-0.184447f,-0.448883f,0.134897f},
{-0.173958f,-0.448883f,0.116013f},{-0.184447f,-0.448883f,0.116013f},{-0.173958f,0.444386f,0.134897f},
{-0.184447f,0.444386f,0.134897f},{-0.173958f,0.444386f,0.116013f},{-0.184447f,0.444386f,0.116013f},
{-0.174308f,-0.448883f,-0.116889f},{-0.184798f,-0.448883f,-0.116889f},{-0.174308f,-0.448883f,-0.135773f},
{-0.184798f,-0.448883f,-0.135773f},{-0.174308f,0.444386f,-0.11689f},{-0.184798f,0.444386f,-0.11689f},
{-0.174308f,0.444386f,-0.135773f},{-0.184798f,0.444386f,-0.135773f},{-0.143702f,-0.448883f,-0.165544f},
{-0.143702f,-0.448883f,-0.176033f},{-0.124818f,-0.448883f,-0.165544f},{-0.124818f,-0.448883f,-0.176033f},
{-0.143702f,0.444386f,-0.165544f},{-0.143702f,0.444386f,-0.176033f},{-0.124818f,0.444386f,-0.165544f},
{-0.124818f,0.444386f,-0.176033f},{0.125641f,-0.448883f,0.165503f},{0.125641f,-0.448883f,0.175993f},
{0.144524f,-0.448883f,0.165503f},{0.144524f,-0.448883f,0.175993f},{0.125641f,0.444386f,0.165503f},
{0.125641f,0.444386f,0.175993f},{0.144524f,0.444386f,0.165503f},{0.144524f,0.444386f,0.175993f},
{0.174295f,-0.448883f,0.134897f},{0.184784f,-0.448883f,0.134897f},{0.174295f,-0.448883f,0.116013f},
{0.184784f,-0.448883f,0.116013f},{0.174295f,0.444386f,0.134897f},{0.184784f,0.444386f,0.134897f},
{0.174295f,0.444386f,0.116013f},{0.184784f,0.444386f,0.116013f},{0.174645f,-0.448883f,-0.116889f},
{0.185135f,-0.448883f,-0.116889f},{0.174645f,-0.448883f,-0.135773f},{0.185135f,-0.448883f,-0.135773f},
{0.174645f,0.444386f,-0.11689f},{0.185135f,0.444386f,-0.11689f},{0.174645f,0.444386f,-0.135773f},
{0.185135f,0.444386f,-0.135773f},{0.144039f,-0.448883f,-0.165544f},{0.144039f,-0.448883f,-0.176033f},
{0.125155f,-0.448883f,-0.165544f},{0.125155f,-0.448883f,-0.176033f},{0.144039f,0.444386f,-0.165544f},
{0.144039f,0.444386f,-0.176033f},{0.125155f,0.444386f,-0.165544f},{0.125155f,0.444386f,-0.176033f},
{-0.139927f,-0.449868f,-0.17096f},{-0.179641f,-0.449868f,-0.131245f},{-0.179641f,-0.449868f,0.13143f},
{-0.139927f,-0.449868f,0.171145f},{0.139745f,-0.449868f,0.170952f},{0.179459f,-0.449868f,0.131238f},
{0.179459f,-0.449868f,-0.131438f},{0.139745f,-0.449868f,-0.171152f},{-0.139927f,0.445347f,-0.17096f},
{-0.179641f,0.445347f,-0.131245f},{-0.179641f,0.445347f,0.13143f},{-0.139927f,0.445347f,0.171145f},
{0.139745f,0.445347f,0.170952f},{0.179459f,0.445347f,0.131238f},{0.179459f,0.445347f,-0.131438f},
{0.139745f,0.445347f,-0.171153f}
};
static GLfloat normals [48][3] = {
{-0.707107f,0.0f,-0.707107f},{-1.0f,0.0f,0.0f},{-0.707107f,0.0f,0.707107f},
{0.000689506f,0.0f,1.0f},{0.707107f,0.0f,0.707107f},{1.0f,0.0f,0.0f},
{0.707107f,0.0f,-0.707107f},{-0.000689506f,0.0f,-1.0f},{0.0f,-1.0f,0.0f},
{-0.707107f,0.0f,-0.707107f},{0.707107f,0.0f,-0.707107f},{0.0f,1.0f,0.0f},
{1.0f,5.052e-08f,0.0f},{0.0f,3.368e-08f,1.0f},{0.0f,-3.368e-08f,-1.0f},
{0.0f,0.0f,1.0f},{-1.0f,-3.368e-08f,0.0f},{0.0f,-1.684e-08f,-1.0f},
{1.0f,3.368e-08f,0.0f},{0.0f,5.052e-08f,1.0f},{-1.0f,-6.736e-08f,0.0f},
{1.0f,8.42001e-08f,0.0f},{-1.0f,-5.052e-08f,0.0f},{1.0f,6.736e-08f,0.0f},
{-1.0f,-1.684e-08f,0.0f},{-0.707107f,-2.37636e-08f,-0.707107f},{-0.707107f,-2.37636e-08f,-0.707107f},
{-0.707107f,2.97045e-08f,0.707107f},{-0.707107f,3.56454e-08f,0.707107f},{-0.707107f,2.37636e-08f,0.707107f},
{0.000689493f,5.04044e-08f,1.0f},{0.000689494f,5.03986e-08f,1.0f},{0.000689493f,5.04102e-08f,1.0f},
{0.707107f,2.37636e-08f,0.707107f},{0.707107f,2.37636e-08f,0.707107f},{0.707107f,2.37636e-08f,0.707107f},
{0.707107f,-2.97045e-08f,-0.707107f},{0.707107f,-2.37636e-08f,-0.707107f},{0.707107f,-3.56454e-08f,-0.707107f},
{-0.000689574f,-2.51993e-08f,-1.0f},{-0.000689601f,-3.36068e-08f,-1.0f},{-0.000689547f,-1.67918e-08f,-1.0f},
{-7.08635e-09f,-1.0f,5.72671e-08f},{-4.81395e-07f,-1.0f,2.71559e-08f},{1.71142e-08f,-1.0f,8.14676e-08f},
{7.79874e-08f,-1.0f,2.42006e-08f},{-7.03756e-07f,-1.0f,0.0f},{-1.51508e-06f,-1.0f,0.0f}
};
static GLfloat textures [322][2] = {
{0.66705f,0.448174f},{0.9985f,0.448174f},{0.9985f,0.995504f},
{0.66705f,0.995504f},{0.350908f,0.448174f},{2.65078f,0.448174f},
{2.65078f,0.995502f},{0.350908f,0.995502f},{0.00149909f,0.448174f},
{0.33295f,0.448174f},{0.33295f,0.995504f},{0.00149909f,0.995504f},
{2.66705f,0.448174f},{2.66705f,0.995504f},{0.66705f,0.448174f},
{0.998501f,0.448174f},{0.998501f,0.995504f},{0.66705f,0.995504f},
{0.00149873f,0.448174f},{0.332949f,0.448174f},{0.332949f,0.995504f},
{0.00149873f,0.995504f},{2.66705f,0.448174f},{2.66705f,0.995504f},
{0.349221f,0.00449622f},{0.00318709f,8.00115f},{0.00149927f,0.998848f},
{2.64909f,0.00449777f},{2.99681f,0.99885f},{2.9985f,8.00115f},
{0.00318709f,0.00114918f},{2.9985f,0.00115108f},{0.66705f,0.00449562f},
{0.998501f,0.00449562f},{0.998501f,0.551826f},{0.66705f,0.551826f},
{0.350908f,0.00449562f},{2.65078f,0.00449562f},{2.65078f,0.551826f},
{0.350908f,0.551826f},{0.00149873f,0.00449562f},{0.332949f,0.00449562f},
{0.332949f,0.551826f},{0.00149873f,0.551826f},{2.66705f,0.00449562f},
{2.66705f,0.551826f},{0.66705f,0.00449562f},{0.9985f,0.00449562f},
{0.9985f,0.551826f},{0.66705f,0.551826f},{0.00149909f,0.00449562f},
{0.33295f,0.00449562f},{0.33295f,0.551826f},{0.00149909f,0.551826f},
{2.66705f,0.00449562f},{2.66705f,0.551826f},{0.650779f,0.00449562f},
{0.998501f,0.998848f},{0.996813f,8.00115f},{2.99681f,8.00115f},
{0.003187f,0.99885f},{0.00149927f,8.00115f},{0.349221f,0.995502f},
{0.00149927f,0.00115108f},{2.99681f,0.00114918f},{2.64909f,0.995502f},
{0.893339f,0.516632f},{0.981647f,0.971249f},{0.893339f,0.971249f},
{0.981647f,0.516632f},{0.106661f,0.516631f},{0.0183529f,0.971247f},
{0.0183528f,0.516631f},{0.106661f,0.971247f},{0.106661f,0.464091f},
{0.0183528f,8.49548f},{0.0183528f,0.464091f},{0.106661f,8.49548f},
{0.494456f,0.464091f},{0.342918f,8.49548f},{0.342917f,0.464091f},
{0.494456f,8.49548f},{0.981647f,0.464091f},{0.893339f,8.49548f},
{0.893339f,0.464091f},{0.981647f,8.49548f},{0.657083f,0.464091f},
{0.505544f,8.49548f},{0.505544f,0.464091f},{0.657083f,8.49548f},
{0.635669f,0.687968f},{0.476691f,0.940496f},{0.476691f,0.687968f},
{0.635669f,0.940496f},{0.364331f,0.687968f},{0.523309f,0.940496f},
{0.364331f,0.940496f},{0.523309f,0.687968f},{0.104011f,0.464091f},
{0.0198346f,8.49548f},{0.0198346f,0.464091f},{0.104011f,8.49548f},
{0.635669f,0.464091f},{0.476691f,8.49548f},{0.476691f,0.464091f},
{0.635669f,8.49548f},{0.980165f,0.464091f},{0.895989f,8.49548f},
{0.895989f,0.464091f},{0.980165f,8.49548f},{0.523309f,0.464091f},
{0.364331f,8.49548f},{0.364331f,0.464091f},{0.523309f,8.49548f},
{0.51593f,0.696401f},{0.356952f,0.948929f},{0.356952f,0.696401f},
{0.51593f,0.94893f},{0.48407f,0.696401f},{0.643048f,0.948929f},
{0.48407f,0.94893f},{0.643047f,0.696401f},{0.1012f,0.464091f},
{0.0170235f,8.49548f},{0.0170235f,0.464091f},{0.1012f,8.49548f},
{0.51593f,0.464091f},{0.356952f,8.49548f},{0.356952f,0.464091f},
{0.51593f,8.49548f},{0.982976f,0.464091f},{0.8988f,8.49548f},
{0.8988f,0.464091f},{0.982976f,8.49548f},{0.643048f,0.464091f},
{0.48407f,8.49548f},{0.48407f,0.464091f},{0.643047f,8.49548f},
{0.106318f,0.959562f},{0.0180094f,0.504946f},{0.106318f,0.504946f},
{0.0180094f,0.959562f},{0.893682f,0.959562f},{0.981991f,0.504947f},
{0.981991f,0.959562f},{0.893682f,0.504947f},{0.106318f,0.464091f},
{0.0180094f,8.49548f},{0.0180094f,0.464091f},{0.106318f,8.49548f},
{0.653188f,0.464091f},{0.501649f,8.49548f},{0.501649f,0.464091f},
{0.653188f,8.49548f},{0.981991f,0.464091f},{0.893682f,8.49548f},
{0.893682f,0.464091f},{0.981991f,8.49548f},{0.498351f,0.464091f},
{0.346812f,8.49548f},{0.346813f,0.464091f},{0.498351f,8.49548f},
{0.893339f,0.475256f},{0.893339f,0.0206398f},{0.981647f,0.0206401f},
{0.981647f,0.475256f},{0.106661f,0.475256f},{0.0183524f,0.475256f},
{0.0183523f,0.0206406f},{0.106661f,0.0206406f},{0.893339f,0.464091f},
{0.981647f,0.464091f},{0.981647f,8.49548f},{0.893339f,8.49548f},
{0.508248f,0.464091f},{0.659787f,0.464091f},{0.659786f,8.49548f},
{0.508248f,8.49548f},{0.0183523f,0.464091f},{0.106661f,0.464091f},
{0.106661f,8.49548f},{0.0183523f,8.49548f},{0.340213f,0.464091f},
{0.491752f,0.464091f},{0.491752f,8.49548f},{0.340214f,8.49548f},
{0.635669f,0.30392f},{0.476692f,0.303919f},{0.476692f,0.0513909f},
{0.63567f,0.0513909f},{0.36433f,0.30392f},{0.36433f,0.0513909f},
{0.523308f,0.0513909f},{0.523308f,0.303919f},{0.898693f,0.464091f},
{0.98287f,0.464091f},{0.98287f,8.49548f},{0.898693f,8.49548f},
{0.36433f,0.464091f},{0.523308f,0.464091f},{0.523308f,8.49548f},
{0.36433f,8.49548f},{0.0171303f,0.464091f},{0.101306f,0.464091f},
{0.101306f,8.49548f},{0.0171303f,8.49548f},{0.476692f,0.464091f},
{0.635669f,0.464091f},{0.63567f,8.49548f},{0.476692f,8.49548f},
{0.515931f,0.295484f},{0.356953f,0.295484f},{0.356953f,0.0429559f},
{0.515931f,0.0429559f},{0.484069f,0.295484f},{0.484069f,0.0429559f},
{0.643047f,0.0429559f},{0.643047f,0.295484f},{0.901505f,0.464091f},
{0.985681f,0.464091f},{0.985681f,8.49548f},{0.901505f,8.49548f},
{0.484069f,0.464091f},{0.643047f,0.464091f},{0.643047f,8.49548f},
{0.484069f,8.49548f},{0.0143186f,0.464091f},{0.0984948f,0.464091f},
{0.0984948f,8.49548f},{0.0143186f,8.49548f},{0.356953f,0.464091f},
{0.515931f,0.464091f},{0.515931f,8.49548f},{0.356953f,8.49548f},
{0.106318f,0.0323224f},{0.106318f,0.486938f},{0.01801f,0.486938f},
{0.01801f,0.0323222f},{0.893682f,0.0323217f},{0.98199f,0.0323217f},
{0.98199f,0.486937f},{0.893682f,0.486937f},{0.893682f,0.464091f},
{0.98199f,0.464091f},{0.98199f,8.49548f},{0.893682f,8.49548f},
{0.344107f,0.464091f},{0.495646f,0.464091f},{0.495646f,8.49548f},
{0.344107f,8.49548f},{0.01801f,0.464091f},{0.106318f,0.464091f},
{0.106318f,8.49548f},{0.01801f,8.49548f},{0.504354f,0.464091f},
{0.655893f,0.464091f},{0.655893f,8.49548f},{0.504354f,8.49548f},
{0.890167f,0.00999093f},{1.995f,0.00999212f},{1.995f,19.99f},
{0.890166f,19.99f},{0.169695f,0.00999093f},{7.83593f,0.00999093f},
{7.83593f,19.99f},{0.169695f,19.99f},{0.00499576f,0.00999212f},
{1.10983f,0.00999093f},{1.10983f,19.99f},{0.00499636f,19.99f},
{0.109831f,0.00999093f},{7.89017f,0.00999093f},{7.89017f,19.99f},
{0.109832f,19.99f},{0.890165f,0.00999093f},{1.995f,0.00999093f},
{1.995f,19.99f},{0.890167f,19.99f},{0.00499666f,0.00999093f},
{1.10983f,0.00999093f},{1.10983f,19.99f},{0.00499547f,19.99f},
{0.109832f,0.00999093f},{7.89017f,0.00999093f},{7.89017f,19.99f},
{0.10983f,19.99f},{1.16407f,0.00999331f},{0.0106239f,17.7803f},
{0.00499755f,2.21966f},{8.83031f,0.00999689f},{9.98938f,2.21967f},
{9.995f,15.7803f},{0.0106239f,15.7803f},{9.98938f,0.219669f},
{8.83593f,2.99001f},{0.0106239f,0.780334f},{9.995f,0.780338f},
{1.16969f,2.99001f},{0.835931f,0.00999093f},{1.995f,2.21966f},
{1.98938f,17.7803f},{8.98938f,17.7803f},{0.0106239f,2.21967f},
{1.16969f,0.00999093f},{9.98938f,17.7803f},{0.00499785f,15.7803f},
{0.0106239f,0.219666f},{9.98938f,15.7803f},{1.16407f,2.99001f},
{0.00499785f,0.780338f},{9.98938f,0.780333f},{7.83031f,2.99f},
{0.164069f,2.99001f},{8.98938f,0.780333f},{0.883593f,0.000499547f},
{0.9995f,0.110983f},{0.998938f,0.889017f},{0.116969f,0.000499725f},
{0.00106233f,0.110983f},{0.000499755f,0.889017f},{0.116407f,0.9995f},
{0.883031f,0.9995f}
};
/*Material indicies*/
/*{material index,face count}*/
static int material_ref [3][2] = {
{0,146},
{1,28},
{2,6}
};
struct DIB2D{
 BITMAPINFOHEADER *Info;
 RGBQUAD *palette;
 BYTE    *bits;
};
struct GLTXTLOAD{
 GLint format;
 GLint perpixel;
 GLint Width;
 GLint Height;
 BYTE* bits;
};

/*
BOOL LoadDIB(char*file,DIB2D*dib)
Only trueColor and 256 color ucompressed bitmaps supported
*/
BOOL LoadDIB(char*file,DIB2D*dib)
 {
  BOOL result=FALSE;
  HANDLE hfile=CreateFile(file,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,0);
  if(hfile!=INVALID_HANDLE_VALUE)
    {
     DWORD readed;
     int size=GetFileSize(hfile,0);
     if(size>sizeof(BITMAPFILEHEADER))
      {
       BITMAPFILEHEADER bmfh;
       ReadFile(hfile,&bmfh,sizeof(BITMAPFILEHEADER),&readed,0);
       if((readed==sizeof(BITMAPFILEHEADER)) && (bmfh.bfType==0x4d42))
        {
         dib->Info=(BITMAPINFOHEADER*)(new BYTE[size-sizeof(BITMAPFILEHEADER)]);
         ReadFile(hfile,dib->Info,size-sizeof(BITMAPFILEHEADER),&readed,0);
         dib->bits=(BYTE*)(dib->Info+1);

         if(dib->Info->biBitCount==8)
          {
           dib->palette=(RGBQUAD*)dib->bits;
           if(dib->Info->biClrUsed)dib->bits+=dib->Info->biClrUsed*4;else dib->bits+=1024;
          }else{
           dib->palette=NULL;
          }
         result=TRUE;
        }
      }
     CloseHandle(hfile);
    }
   return result;
 };

long ScanBytes(int pixWidth, int bitsPixel) {
  return (((long)pixWidth*bitsPixel+31) / 32) * 4;
}

BOOL  ScaleImage(DIB2D&dib,GLTXTLOAD&p)
 {
   GLint glMaxTexDim;     // OpenGL maximum texture dimension
   GLint XDMaxTexDim=512; // user maximum texture dimension
   GLint minsize =2;
   double xPow2, yPow2;
   int ixPow2, iyPow2;
   int xSize2, ySize2;
   GLint m_iWidth=dib.Info->biWidth;
   GLint m_iHeight=dib.Info->biHeight;
   glGetIntegerv(GL_MAX_TEXTURE_SIZE, &glMaxTexDim);

   glMaxTexDim = min(XDMaxTexDim, glMaxTexDim);

   if (m_iWidth <= glMaxTexDim)
      xPow2 = log((double)m_iWidth) / log(2.0);
   else
      xPow2 = log((double)glMaxTexDim) / log(2.0);

   if (m_iHeight <= glMaxTexDim)
      yPow2 = log((double)m_iHeight) / log(2.0);
   else
      yPow2 = log((double)glMaxTexDim) / log(2.0);

   ixPow2 = (int)xPow2;
   iyPow2 = (int)yPow2;

   if (xPow2 != (double)ixPow2)
      ixPow2++;
   if (yPow2 != (double)iyPow2)
      iyPow2++;

   xSize2 = 1 << ixPow2;
   ySize2 = 1 << iyPow2;

   if(xSize2<minsize)xSize2=minsize;
   if(ySize2<minsize)ySize2=minsize;

   if(((xSize2==m_iWidth) && (ySize2==m_iHeight)))
   {
     if(dib.Info->biBitCount==24){
       p.format=GL_BGR_EXT;
       p.perpixel=3;
       return FALSE;
      }
     if(dib.Info->biBitCount==32)
      {
       p.format=GL_BGRA_EXT;
       p.perpixel=4;
       return FALSE;
      }
   }

   BYTE *bits=(BYTE *)dib.bits;
   if(dib.Info->biBitCount==8){

    // convert to TRUECOLOR
    int _perline=ScanBytes(8,m_iWidth);
    int perline=ScanBytes(24,m_iWidth);
    bits= new BYTE[perline*m_iHeight * sizeof(BYTE)];
    for(int y=0;y<m_iHeight;y++){
     BYTE *_b=((BYTE *)dib.bits)+y*_perline;
     BYTE *b=bits+y*perline;
     for(int x=0;x<m_iWidth;x++){
      RGBQUAD _p=dib.palette[*_b];
      _b++;
      *b=_p.rgbBlue;b++;
      *b=_p.rgbGreen;b++;
      *b=_p.rgbRed;b++;
     }
    }
   }
   BOOL isAlpha=(dib.Info->biBitCount==32);
   int _mem_size=xSize2 * ySize2 *  sizeof(BYTE);
   if(isAlpha){
         _mem_size*=4;
          p.perpixel=4;
          p.format=GL_BGRA_EXT;
          }else {
          _mem_size*=3;
          p.perpixel=3;
          p.format=GL_BGR_EXT;
          }
   BYTE *pData = (BYTE*)new BYTE[_mem_size];
   if (!pData) return FALSE;

   if(isAlpha){
   gluScaleImage(GL_BGRA_EXT, m_iWidth, m_iHeight,
                 GL_UNSIGNED_BYTE, bits,
                 xSize2, ySize2, GL_UNSIGNED_BYTE, pData);
   }
   else
   gluScaleImage(GL_RGB, m_iWidth, m_iHeight,
                 GL_UNSIGNED_BYTE, bits,
                 xSize2, ySize2, GL_UNSIGNED_BYTE, pData);


   if(bits!=dib.bits)delete bits;
//   m_pBits = pData;
   m_iWidth = xSize2 ;
   m_iHeight = ySize2 ;
   p.Width=m_iWidth;
   p.Height=m_iHeight;
   p.bits=pData;

   return TRUE ;
 }
void LoadTexture(char*filename)
 {
  DIB2D dib;
  GLTXTLOAD load;
  if(LoadDIB(filename,&dib))
   {

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    if(ScaleImage(dib,load))
     {
   glTexImage2D(GL_TEXTURE_2D,0,load.perpixel,
                load.Width,load.Height,0,
                load.format,GL_UNSIGNED_BYTE,
                load.bits);
                delete load.bits;
     }else{

   glTexImage2D(GL_TEXTURE_2D,0,load.perpixel,
                dib.Info->biWidth,dib.Info->biHeight,
                0,load.format,GL_UNSIGNED_BYTE,dib.bits);
     }
   delete dib.Info;
   }

  //DeleteObject(hbitmap);
 };


void MyMaterial(GLenum mode,GLfloat *f,GLfloat alpha)
{
 GLfloat d[4];
 d[0]=f[0];
 d[1]=f[1];
 d[2]=f[2];
 d[3]=alpha;
 glMaterialfv (GL_FRONT_AND_BACK,mode,d);
}
/*
 *  SelectMaterial uses OpenGL commands to define facet colors.
 *
 *  Returns:
 *    Nothing
 */

void SelectMaterial(int i)
{
  //
  // Define the reflective properties of the 3D Object faces.
  //
  glEnd();
  GLfloat alpha=materials[i].alpha;
  MyMaterial (GL_AMBIENT, materials[i].ambient,alpha);
  MyMaterial (GL_DIFFUSE, materials[i].diffuse,alpha);
  MyMaterial (GL_SPECULAR, materials[i].specular,alpha);
  MyMaterial (GL_EMISSION, materials[i].emission,alpha);
  glMaterialf (GL_FRONT_AND_BACK,GL_SHININESS,materials[i].phExp);
	glEnd();
	if(materials[i].texture>-1)
	{
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D,texture_maps[materials[i].texture].id);
	}
	else
	glDisable(GL_TEXTURE_2D);
	glBegin(GL_TRIANGLES);

  glBegin(GL_TRIANGLES);

};

GLint Gen3DObjectList()
{
 int i;
 int j;
 int k;
 int l;

for(i=0;i<3;i++)
  {
    GLuint texture_name;
    glGenTextures(1,&texture_name);
    texture_maps[i].id=texture_name;
    glBindTexture(GL_TEXTURE_2D,texture_name);
    LoadTexture(texture_maps[i].name);
  }

 GLint lid=glGenLists(1);
	int mcount=0;
	int mindex=0;
   glNewList(lid, GL_COMPILE);

   for (k=0; k < 112; k++ ) {
	   for (l=0; l < 3; l++ ) {
			vertices[k][l] = 4.0f*vertices[k][l];
	   }
   }

    glBegin (GL_TRIANGLES);
      for(i=0;i<sizeof(face_indicies)/sizeof(face_indicies[0]);i++)
       {
      if(!mcount)
       {
        SelectMaterial(material_ref[mindex][0]);
        mcount=material_ref[mindex][1];
        mindex++;
       }
       mcount--;
       for(j=0;j<3;j++)
        {
          int vi=face_indicies[i][j];
          int ni=face_indicies[i][j+3];//Normal index
          int ti=face_indicies[i][j+6];//Texture index
           glNormal3f (normals[ni][0],normals[ni][1],normals[ni][2]);
           glTexCoord2f(textures[ti][0],textures[ti][1]);
           glVertex3f (vertices[vi][0],vertices[vi][1],vertices[vi][2]);
        }
       }
    glEnd ();

   glEndList();
   return lid;
};
}